import nest_asyncio
nest_asyncio.apply()
import asyncio
import logging
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
from aiogram.filters.command import Command


# Ваш токен API
API_TOKEN = 'telegram bot token'

# Создание экземпляров бота и диспетчера
bot = Bot(token=API_TOKEN)

dp = Dispatcher()
# Зададим имя базы данных
DB_NAME = 'quiz_bot.db'
# счетчик правильных ответов и структуры квиза
user_correct_answer = {}

quiz_data = [
    {
        'question': 'Что такое Python?',
        'options': ['Язык программирования', 'Тип данных', 'Музыкальный инструмент', 'Змея на английском'],
        'correct_option': 0
    },
    {
        'question': 'Какой тип данных используется для хранения целых чисел?',
        'options': ['float', 'str', 'int', 'natural'],
        'correct_option': 2
    },
    {
        'question': 'Какой оператор имеет более высокий приоритет в следующем списке',
        'options': ['% (модуль)', '& (Побитовое И)', '** (Экспонента)', '> (Сравнение)'],
        'correct_option': 2
    },
    {
        'question': 'Что выведет следующий код, при его исполнении? Используется Python 3.x. print(type(1 / 2))',
        'options': ['int', 'number', 'double', 'float'],
        'correct_option': 3
    },
    {
        'question': 'Какие из приведенных ниже обозначений неверны?',
        'options': ['х = 0b102', 'х = 0247', 'х = 0x3a5', 'x = 10'],
        'correct_option': 1
    },
    {
        'question': 'Python не является _____ языком?',
        'options': ['Моделирование', 'Общего назначения', 'Сценарий', 'Все вышеперечисленное'],
        'correct_option': 0
    },
    {
        'question': 'Можно ли создавать анонимные функции с помощью ключевого слова?',
        'options': ['lamda', 'anonym', 'def', 'fun'],
        'correct_option': 0
    },
    {
        'question': ' Какой из перечисленных объектов имеет ассоциативность справа налево?',
        'options': ['Побитовое НЕ', 'Операторы сравнения', 'Умножение', 'Задание'],
        'correct_option': 3
    },
    {
        'question': 'Python — это _________ язык?',
        'options': ['Переводчик', 'Динамически типизированный', 'Чувствителен к регистру', 'Все вышеперечисленное'],
        'correct_option': 3
    },
    {
        'question': 'bin_list=[1,0,1,0,1] print([x|1 для x в bin_list]). Вывод?',
        'options': ['[1,0,1,0,1]', '[1,1,1,1]', '[0,1,0,1,0]', '[0,0,0,0]'],
        'correct_option': 1
    }
]

# Ваши функции get_quiz_index и update_quiz_index...
async def new_quiz(message):
    user_id = message.from_user.id
    current_question_index = 0
    await update_quiz_index(user_id, current_question_index)
    await get_question(message, user_id)

async def get_quiz_index(user_id):
    # Подключаемся к базе данных
    async with aiosqlite.connect(DB_NAME) as db:
        # Получаем запись для заданного пользователя
        async with db.execute('SELECT question_index FROM quiz_state WHERE user_id = (?)', (user_id,)) as cursor:
            # Возвращаем результат
            results = await cursor.fetchone()
            if results is not None:
                return results[0]
            else:
                return 0


async def update_quiz_index(user_id, index):
    # Создаем соединение с базой данных (если она не существует, она будет создана)
    async with aiosqlite.connect(DB_NAME) as db:
        # Вставляем новую запись или заменяем ее, если с данным user_id уже существует
        await db.execute('INSERT OR REPLACE INTO quiz_state (user_id, question_index) VALUES (?, ?)', (user_id, index))
        # Сохраняем изменения
        await db.commit()
# Ваши обработчики команд...

# Функция для генерации клавиатуры с вариантами ответов...
def generate_options_keyboard(answer_options, right_answer):
    builder = InlineKeyboardBuilder()

    for option in answer_options:
        builder.add(types.InlineKeyboardButton(
            text=option,
            callback_data="right_answer" if option == right_answer else "wrong_answer")
        )

    builder.adjust(1)
    return builder.as_markup()

# Ваши обработчики для правильного и неправильного ответов...
@dp.callback_query(F.data == "right_answer")
async def right_answer(callback: types.CallbackQuery):

    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    await callback.message.answer("Верно!")
    current_question_index = await get_quiz_index(callback.from_user.id)
    # Обновление номера текущего вопроса в базе данных
    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index)


    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        await callback.message.answer("Это был последний вопрос. Квиз завершен!")


@dp.callback_query(F.data == "wrong_answer")
async def wrong_answer(callback: types.CallbackQuery):
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # Получение текущего вопроса из словаря состояний пользователя
    current_question_index = await get_quiz_index(callback.from_user.id)
    correct_option = quiz_data[current_question_index]['correct_option']

    await callback.message.answer(f"Неправильно. Правильный ответ: {quiz_data[current_question_index]['options'][correct_option]}")

    # Обновление номера текущего вопроса в базе данных
    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index)


    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        await callback.message.answer("Это был последний вопрос. Квиз завершен!")
# Команда для начала
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="Начать игру"))
    await message.answer("Добро пожаловать в квиз!", reply_markup=builder.as_markup(resize_keyboard=True))

async def get_question(message, user_id):
    # Получение текущего вопроса из словаря состояний пользователя
    current_question_index = await get_quiz_index(user_id)
    correct_index = quiz_data[current_question_index]['correct_option']
    opts = quiz_data[current_question_index]['options']
    kb = generate_options_keyboard(opts, opts[correct_index])
    await message.answer(f"{quiz_data[current_question_index]['question']}", reply_markup=kb)

async def create_table():
    # Создаем соединение с базой данных (если она не существует, она будет создана)
    async with aiosqlite.connect(DB_NAME) as db:
        # Создаем таблицу
        await db.execute('''CREATE TABLE IF NOT EXISTS quiz_state (user_id INTEGER PRIMARY KEY, question_index INTEGER)''')
        # Сохраняем изменения
        await db.commit()

# Запуск процесса поллинга новых апдейтов
async def main():

    # Запускаем создание таблицы базы данных
    await create_table()

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
